//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	crossplane_runtime "github.com/oam-dev/terraform-controller/api/types/crossplane-runtime"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ArtifactoryBackendConf) DeepCopyInto(out *ArtifactoryBackendConf) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ArtifactoryBackendConf.
func (in *ArtifactoryBackendConf) DeepCopy() *ArtifactoryBackendConf {
	if in == nil {
		return nil
	}
	out := new(ArtifactoryBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzurermBackendConf) DeepCopyInto(out *AzurermBackendConf) {
	*out = *in
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Snapshot != nil {
		in, out := &in.Snapshot, &out.Snapshot
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.MSIEndpoint != nil {
		in, out := &in.MSIEndpoint, &out.MSIEndpoint
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionID != nil {
		in, out := &in.SubscriptionID, &out.SubscriptionID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.UseMicrosoftGraph != nil {
		in, out := &in.UseMicrosoftGraph, &out.UseMicrosoftGraph
		*out = new(bool)
		**out = **in
	}
	if in.UseMSI != nil {
		in, out := &in.UseMSI, &out.UseMSI
		*out = new(bool)
		**out = **in
	}
	if in.SASToken != nil {
		in, out := &in.SASToken, &out.SASToken
		*out = new(string)
		**out = **in
	}
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.UseAzureadAuth != nil {
		in, out := &in.UseAzureadAuth, &out.UseAzureadAuth
		*out = new(bool)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificatePassword != nil {
		in, out := &in.ClientCertificatePassword, &out.ClientCertificatePassword
		*out = new(string)
		**out = **in
	}
	if in.ClientCertificateSecret != nil {
		in, out := &in.ClientCertificateSecret, &out.ClientCertificateSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.ClientSecret != nil {
		in, out := &in.ClientSecret, &out.ClientSecret
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzurermBackendConf.
func (in *AzurermBackendConf) DeepCopy() *AzurermBackendConf {
	if in == nil {
		return nil
	}
	out := new(AzurermBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Backend) DeepCopyInto(out *Backend) {
	*out = *in
	if in.Remote != nil {
		in, out := &in.Remote, &out.Remote
		*out = new(RemoteBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.Artifactory != nil {
		in, out := &in.Artifactory, &out.Artifactory
		*out = new(ArtifactoryBackendConf)
		**out = **in
	}
	if in.Azurerm != nil {
		in, out := &in.Azurerm, &out.Azurerm
		*out = new(AzurermBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.Consul != nil {
		in, out := &in.Consul, &out.Consul
		*out = new(ConsulBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.COS != nil {
		in, out := &in.COS, &out.COS
		*out = new(COSBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.ETCD != nil {
		in, out := &in.ETCD, &out.ETCD
		*out = new(ETCDBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.ETCDV3 != nil {
		in, out := &in.ETCDV3, &out.ETCDV3
		*out = new(ETCDV3BackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.GCS != nil {
		in, out := &in.GCS, &out.GCS
		*out = new(GCSBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		*out = new(HTTPBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.Kubernetes != nil {
		in, out := &in.Kubernetes, &out.Kubernetes
		*out = new(KubernetesBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.Manta != nil {
		in, out := &in.Manta, &out.Manta
		*out = new(MantaBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.OSS != nil {
		in, out := &in.OSS, &out.OSS
		*out = new(OSSBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.PG != nil {
		in, out := &in.PG, &out.PG
		*out = new(PGBackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.S3 != nil {
		in, out := &in.S3, &out.S3
		*out = new(S3BackendConf)
		(*in).DeepCopyInto(*out)
	}
	if in.Swift != nil {
		in, out := &in.Swift, &out.Swift
		*out = new(SwiftBackendConf)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Backend.
func (in *Backend) DeepCopy() *Backend {
	if in == nil {
		return nil
	}
	out := new(Backend)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BaseConfigurationSpec) DeepCopyInto(out *BaseConfigurationSpec) {
	*out = *in
	if in.WriteConnectionSecretToReference != nil {
		in, out := &in.WriteConnectionSecretToReference, &out.WriteConnectionSecretToReference
		*out = new(crossplane_runtime.SecretReference)
		**out = **in
	}
	if in.ProviderReference != nil {
		in, out := &in.ProviderReference, &out.ProviderReference
		*out = new(crossplane_runtime.Reference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BaseConfigurationSpec.
func (in *BaseConfigurationSpec) DeepCopy() *BaseConfigurationSpec {
	if in == nil {
		return nil
	}
	out := new(BaseConfigurationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *COSBackendConf) DeepCopyInto(out *COSBackendConf) {
	*out = *in
	if in.SecretID != nil {
		in, out := &in.SecretID, &out.SecretID
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(string)
		**out = **in
	}
	if in.ACL != nil {
		in, out := &in.ACL, &out.ACL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new COSBackendConf.
func (in *COSBackendConf) DeepCopy() *COSBackendConf {
	if in == nil {
		return nil
	}
	out := new(COSBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Configuration) DeepCopyInto(out *Configuration) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Configuration.
func (in *Configuration) DeepCopy() *Configuration {
	if in == nil {
		return nil
	}
	out := new(Configuration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Configuration) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationApplyStatus) DeepCopyInto(out *ConfigurationApplyStatus) {
	*out = *in
	if in.Outputs != nil {
		in, out := &in.Outputs, &out.Outputs
		*out = make(map[string]Property, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationApplyStatus.
func (in *ConfigurationApplyStatus) DeepCopy() *ConfigurationApplyStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigurationApplyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationDestroyStatus) DeepCopyInto(out *ConfigurationDestroyStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationDestroyStatus.
func (in *ConfigurationDestroyStatus) DeepCopy() *ConfigurationDestroyStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigurationDestroyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationList) DeepCopyInto(out *ConfigurationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Configuration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationList.
func (in *ConfigurationList) DeepCopy() *ConfigurationList {
	if in == nil {
		return nil
	}
	out := new(ConfigurationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigurationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationSpec) DeepCopyInto(out *ConfigurationSpec) {
	*out = *in
	if in.Variable != nil {
		in, out := &in.Variable, &out.Variable
		*out = new(runtime.RawExtension)
		(*in).DeepCopyInto(*out)
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(Backend)
		(*in).DeepCopyInto(*out)
	}
	in.BaseConfigurationSpec.DeepCopyInto(&out.BaseConfigurationSpec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationSpec.
func (in *ConfigurationSpec) DeepCopy() *ConfigurationSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigurationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationStatus) DeepCopyInto(out *ConfigurationStatus) {
	*out = *in
	in.Apply.DeepCopyInto(&out.Apply)
	out.Destroy = in.Destroy
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationStatus.
func (in *ConfigurationStatus) DeepCopy() *ConfigurationStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigurationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsulBackendConf) DeepCopyInto(out *ConsulBackendConf) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.HTTPAuth != nil {
		in, out := &in.HTTPAuth, &out.HTTPAuth
		*out = new(string)
		**out = **in
	}
	if in.Gzip != nil {
		in, out := &in.Gzip, &out.Gzip
		*out = new(bool)
		**out = **in
	}
	if in.Lock != nil {
		in, out := &in.Lock, &out.Lock
		*out = new(bool)
		**out = **in
	}
	if in.CAFileSecret != nil {
		in, out := &in.CAFileSecret, &out.CAFileSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.CertFileSecret != nil {
		in, out := &in.CertFileSecret, &out.CertFileSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.KeyFileSecret != nil {
		in, out := &in.KeyFileSecret, &out.KeyFileSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsulBackendConf.
func (in *ConsulBackendConf) DeepCopy() *ConsulBackendConf {
	if in == nil {
		return nil
	}
	out := new(ConsulBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CurrentNSSecretSelector) DeepCopyInto(out *CurrentNSSecretSelector) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CurrentNSSecretSelector.
func (in *CurrentNSSecretSelector) DeepCopy() *CurrentNSSecretSelector {
	if in == nil {
		return nil
	}
	out := new(CurrentNSSecretSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ETCDBackendConf) DeepCopyInto(out *ETCDBackendConf) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ETCDBackendConf.
func (in *ETCDBackendConf) DeepCopy() *ETCDBackendConf {
	if in == nil {
		return nil
	}
	out := new(ETCDBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ETCDV3BackendConf) DeepCopyInto(out *ETCDV3BackendConf) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Lock != nil {
		in, out := &in.Lock, &out.Lock
		*out = new(bool)
		**out = **in
	}
	if in.CacertSecret != nil {
		in, out := &in.CacertSecret, &out.CacertSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.CertSecret != nil {
		in, out := &in.CertSecret, &out.CertSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.KeySecret != nil {
		in, out := &in.KeySecret, &out.KeySecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.MAXRequestBytes != nil {
		in, out := &in.MAXRequestBytes, &out.MAXRequestBytes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ETCDV3BackendConf.
func (in *ETCDV3BackendConf) DeepCopy() *ETCDV3BackendConf {
	if in == nil {
		return nil
	}
	out := new(ETCDV3BackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GCSBackendConf) DeepCopyInto(out *GCSBackendConf) {
	*out = *in
	if in.CredentialsSecret != nil {
		in, out := &in.CredentialsSecret, &out.CredentialsSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.ImpersonateServiceAccount != nil {
		in, out := &in.ImpersonateServiceAccount, &out.ImpersonateServiceAccount
		*out = new(string)
		**out = **in
	}
	if in.ImpersonateServiceAccountDelegates != nil {
		in, out := &in.ImpersonateServiceAccountDelegates, &out.ImpersonateServiceAccountDelegates
		*out = new(string)
		**out = **in
	}
	if in.AccessToken != nil {
		in, out := &in.AccessToken, &out.AccessToken
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GCSBackendConf.
func (in *GCSBackendConf) DeepCopy() *GCSBackendConf {
	if in == nil {
		return nil
	}
	out := new(GCSBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPBackendConf) DeepCopyInto(out *HTTPBackendConf) {
	*out = *in
	if in.UpdateMethod != nil {
		in, out := &in.UpdateMethod, &out.UpdateMethod
		*out = new(string)
		**out = **in
	}
	if in.LockAddress != nil {
		in, out := &in.LockAddress, &out.LockAddress
		*out = new(string)
		**out = **in
	}
	if in.LockMethod != nil {
		in, out := &in.LockMethod, &out.LockMethod
		*out = new(string)
		**out = **in
	}
	if in.UnlockAddress != nil {
		in, out := &in.UnlockAddress, &out.UnlockAddress
		*out = new(string)
		**out = **in
	}
	if in.UnlockMethod != nil {
		in, out := &in.UnlockMethod, &out.UnlockMethod
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.SkipCertVerification != nil {
		in, out := &in.SkipCertVerification, &out.SkipCertVerification
		*out = new(bool)
		**out = **in
	}
	if in.RetryMax != nil {
		in, out := &in.RetryMax, &out.RetryMax
		*out = new(int)
		**out = **in
	}
	if in.RetryWaitMin != nil {
		in, out := &in.RetryWaitMin, &out.RetryWaitMin
		*out = new(int)
		**out = **in
	}
	if in.RetryWaitMax != nil {
		in, out := &in.RetryWaitMax, &out.RetryWaitMax
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPBackendConf.
func (in *HTTPBackendConf) DeepCopy() *HTTPBackendConf {
	if in == nil {
		return nil
	}
	out := new(HTTPBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesBackendConf) DeepCopyInto(out *KubernetesBackendConf) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.InClusterConfig != nil {
		in, out := &in.InClusterConfig, &out.InClusterConfig
		*out = new(bool)
		**out = **in
	}
	if in.LoadConfigFile != nil {
		in, out := &in.LoadConfigFile, &out.LoadConfigFile
		*out = new(bool)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Insecure != nil {
		in, out := &in.Insecure, &out.Insecure
		*out = new(bool)
		**out = **in
	}
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACertificate != nil {
		in, out := &in.ClusterCACertificate, &out.ClusterCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ConfigSecret != nil {
		in, out := &in.ConfigSecret, &out.ConfigSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.ConfigContext != nil {
		in, out := &in.ConfigContext, &out.ConfigContext
		*out = new(string)
		**out = **in
	}
	if in.ConfigContextAuthInfo != nil {
		in, out := &in.ConfigContextAuthInfo, &out.ConfigContextAuthInfo
		*out = new(string)
		**out = **in
	}
	if in.ConfigContextCluster != nil {
		in, out := &in.ConfigContextCluster, &out.ConfigContextCluster
		*out = new(string)
		**out = **in
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = new(string)
		**out = **in
	}
	if in.Exec != nil {
		in, out := &in.Exec, &out.Exec
		*out = new(KubernetesBackendConfExec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesBackendConf.
func (in *KubernetesBackendConf) DeepCopy() *KubernetesBackendConf {
	if in == nil {
		return nil
	}
	out := new(KubernetesBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesBackendConfExec) DeepCopyInto(out *KubernetesBackendConfExec) {
	*out = *in
	if in.ENV != nil {
		in, out := &in.ENV, &out.ENV
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesBackendConfExec.
func (in *KubernetesBackendConfExec) DeepCopy() *KubernetesBackendConfExec {
	if in == nil {
		return nil
	}
	out := new(KubernetesBackendConfExec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MantaBackendConf) DeepCopyInto(out *MantaBackendConf) {
	*out = *in
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.KeyMaterial != nil {
		in, out := &in.KeyMaterial, &out.KeyMaterial
		*out = new(string)
		**out = **in
	}
	if in.InsecureSkipTLSVerify != nil {
		in, out := &in.InsecureSkipTLSVerify, &out.InsecureSkipTLSVerify
		*out = new(bool)
		**out = **in
	}
	if in.ObjectName != nil {
		in, out := &in.ObjectName, &out.ObjectName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MantaBackendConf.
func (in *MantaBackendConf) DeepCopy() *MantaBackendConf {
	if in == nil {
		return nil
	}
	out := new(MantaBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSSBackendConf) DeepCopyInto(out *OSSBackendConf) {
	*out = *in
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.SecurityToken != nil {
		in, out := &in.SecurityToken, &out.SecurityToken
		*out = new(string)
		**out = **in
	}
	if in.ECSRoleName != nil {
		in, out := &in.ECSRoleName, &out.ECSRoleName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.TablestoreEndpoint != nil {
		in, out := &in.TablestoreEndpoint, &out.TablestoreEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.TablestoreTable != nil {
		in, out := &in.TablestoreTable, &out.TablestoreTable
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.ACL != nil {
		in, out := &in.ACL, &out.ACL
		*out = new(string)
		**out = **in
	}
	if in.AssumeRole != nil {
		in, out := &in.AssumeRole, &out.AssumeRole
		*out = new(OSSBackendConfAssumeRole)
		(*in).DeepCopyInto(*out)
	}
	if in.SharedCredentialsSecret != nil {
		in, out := &in.SharedCredentialsSecret, &out.SharedCredentialsSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.Profile != nil {
		in, out := &in.Profile, &out.Profile
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSSBackendConf.
func (in *OSSBackendConf) DeepCopy() *OSSBackendConf {
	if in == nil {
		return nil
	}
	out := new(OSSBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OSSBackendConfAssumeRole) DeepCopyInto(out *OSSBackendConfAssumeRole) {
	*out = *in
	if in.RoleArn != nil {
		in, out := &in.RoleArn, &out.RoleArn
		*out = new(string)
		**out = **in
	}
	if in.SessionName != nil {
		in, out := &in.SessionName, &out.SessionName
		*out = new(string)
		**out = **in
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
	if in.SessionExpiration != nil {
		in, out := &in.SessionExpiration, &out.SessionExpiration
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OSSBackendConfAssumeRole.
func (in *OSSBackendConfAssumeRole) DeepCopy() *OSSBackendConfAssumeRole {
	if in == nil {
		return nil
	}
	out := new(OSSBackendConfAssumeRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PGBackendConf) DeepCopyInto(out *PGBackendConf) {
	*out = *in
	if in.SchemaNam != nil {
		in, out := &in.SchemaNam, &out.SchemaNam
		*out = new(string)
		**out = **in
	}
	if in.SkipSchemaCreation != nil {
		in, out := &in.SkipSchemaCreation, &out.SkipSchemaCreation
		*out = new(bool)
		**out = **in
	}
	if in.SkipTableCreation != nil {
		in, out := &in.SkipTableCreation, &out.SkipTableCreation
		*out = new(bool)
		**out = **in
	}
	if in.SkipIndexCreation != nil {
		in, out := &in.SkipIndexCreation, &out.SkipIndexCreation
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PGBackendConf.
func (in *PGBackendConf) DeepCopy() *PGBackendConf {
	if in == nil {
		return nil
	}
	out := new(PGBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Property) DeepCopyInto(out *Property) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Property.
func (in *Property) DeepCopy() *Property {
	if in == nil {
		return nil
	}
	out := new(Property)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteBackendConf) DeepCopyInto(out *RemoteBackendConf) {
	*out = *in
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = new(string)
		**out = **in
	}
	in.Workspaces.DeepCopyInto(&out.Workspaces)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteBackendConf.
func (in *RemoteBackendConf) DeepCopy() *RemoteBackendConf {
	if in == nil {
		return nil
	}
	out := new(RemoteBackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteBackendConfWorkspaces) DeepCopyInto(out *RemoteBackendConfWorkspaces) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Prefix != nil {
		in, out := &in.Prefix, &out.Prefix
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteBackendConfWorkspaces.
func (in *RemoteBackendConfWorkspaces) DeepCopy() *RemoteBackendConfWorkspaces {
	if in == nil {
		return nil
	}
	out := new(RemoteBackendConfWorkspaces)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3BackendConf) DeepCopyInto(out *S3BackendConf) {
	*out = *in
	if in.DynamodbEndpoint != nil {
		in, out := &in.DynamodbEndpoint, &out.DynamodbEndpoint
		*out = new(string)
		**out = **in
	}
	if in.DynamodbTable != nil {
		in, out := &in.DynamodbTable, &out.DynamodbTable
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.IAMEndpoint != nil {
		in, out := &in.IAMEndpoint, &out.IAMEndpoint
		*out = new(string)
		**out = **in
	}
	if in.STSEndpoint != nil {
		in, out := &in.STSEndpoint, &out.STSEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.ACL != nil {
		in, out := &in.ACL, &out.ACL
		*out = new(string)
		**out = **in
	}
	if in.AccessKey != nil {
		in, out := &in.AccessKey, &out.AccessKey
		*out = new(string)
		**out = **in
	}
	if in.SecretKey != nil {
		in, out := &in.SecretKey, &out.SecretKey
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.SharedCredentialsSecret != nil {
		in, out := &in.SharedCredentialsSecret, &out.SharedCredentialsSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.Profile != nil {
		in, out := &in.Profile, &out.Profile
		*out = new(string)
		**out = **in
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = new(string)
		**out = **in
	}
	if in.SkipCredentialsValidation != nil {
		in, out := &in.SkipCredentialsValidation, &out.SkipCredentialsValidation
		*out = new(bool)
		**out = **in
	}
	if in.SkipRegionValidation != nil {
		in, out := &in.SkipRegionValidation, &out.SkipRegionValidation
		*out = new(bool)
		**out = **in
	}
	if in.SkipMetadataAPICheck != nil {
		in, out := &in.SkipMetadataAPICheck, &out.SkipMetadataAPICheck
		*out = new(bool)
		**out = **in
	}
	if in.SSECustomerKey != nil {
		in, out := &in.SSECustomerKey, &out.SSECustomerKey
		*out = new(string)
		**out = **in
	}
	if in.RoleARN != nil {
		in, out := &in.RoleARN, &out.RoleARN
		*out = new(string)
		**out = **in
	}
	if in.SessionName != nil {
		in, out := &in.SessionName, &out.SessionName
		*out = new(string)
		**out = **in
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		*out = new(string)
		**out = **in
	}
	if in.AssumeRoleDurationSeconds != nil {
		in, out := &in.AssumeRoleDurationSeconds, &out.AssumeRoleDurationSeconds
		*out = new(int)
		**out = **in
	}
	if in.AssumeRolePolicy != nil {
		in, out := &in.AssumeRolePolicy, &out.AssumeRolePolicy
		*out = new(string)
		**out = **in
	}
	if in.AssumeRolePolicyArns != nil {
		in, out := &in.AssumeRolePolicyArns, &out.AssumeRolePolicyArns
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.AssumeRoleTags != nil {
		in, out := &in.AssumeRoleTags, &out.AssumeRoleTags
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.AssumeRoleTransitiveTagKeys != nil {
		in, out := &in.AssumeRoleTransitiveTagKeys, &out.AssumeRoleTransitiveTagKeys
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.WorkspaceKeyPrefix != nil {
		in, out := &in.WorkspaceKeyPrefix, &out.WorkspaceKeyPrefix
		*out = new(string)
		**out = **in
	}
	if in.ForcePathStyle != nil {
		in, out := &in.ForcePathStyle, &out.ForcePathStyle
		*out = new(string)
		**out = **in
	}
	if in.MAXRetries != nil {
		in, out := &in.MAXRetries, &out.MAXRetries
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3BackendConf.
func (in *S3BackendConf) DeepCopy() *S3BackendConf {
	if in == nil {
		return nil
	}
	out := new(S3BackendConf)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftBackendConf) DeepCopyInto(out *SwiftBackendConf) {
	*out = *in
	if in.AuthURL != nil {
		in, out := &in.AuthURL, &out.AuthURL
		*out = new(string)
		**out = **in
	}
	if in.RegionName != nil {
		in, out := &in.RegionName, &out.RegionName
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.ApplicationCredentialID != nil {
		in, out := &in.ApplicationCredentialID, &out.ApplicationCredentialID
		*out = new(string)
		**out = **in
	}
	if in.ApplicationCredentialName != nil {
		in, out := &in.ApplicationCredentialName, &out.ApplicationCredentialName
		*out = new(string)
		**out = **in
	}
	if in.ApplicationCredentialSecret != nil {
		in, out := &in.ApplicationCredentialSecret, &out.ApplicationCredentialSecret
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.TenantName != nil {
		in, out := &in.TenantName, &out.TenantName
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = new(string)
		**out = **in
	}
	if in.USerDomainName != nil {
		in, out := &in.USerDomainName, &out.USerDomainName
		*out = new(string)
		**out = **in
	}
	if in.UserDomainID != nil {
		in, out := &in.UserDomainID, &out.UserDomainID
		*out = new(string)
		**out = **in
	}
	if in.ProjectDomainName != nil {
		in, out := &in.ProjectDomainName, &out.ProjectDomainName
		*out = new(string)
		**out = **in
	}
	if in.ProjectDomainID != nil {
		in, out := &in.ProjectDomainID, &out.ProjectDomainID
		*out = new(string)
		**out = **in
	}
	if in.DomainID != nil {
		in, out := &in.DomainID, &out.DomainID
		*out = new(string)
		**out = **in
	}
	if in.DomainName != nil {
		in, out := &in.DomainName, &out.DomainName
		*out = new(string)
		**out = **in
	}
	if in.DefaultDomain != nil {
		in, out := &in.DefaultDomain, &out.DefaultDomain
		*out = new(string)
		**out = **in
	}
	if in.Insecure != nil {
		in, out := &in.Insecure, &out.Insecure
		*out = new(bool)
		**out = **in
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.CacertSecret != nil {
		in, out := &in.CacertSecret, &out.CacertSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.CertSecret != nil {
		in, out := &in.CertSecret, &out.CertSecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.KeySecret != nil {
		in, out := &in.KeySecret, &out.KeySecret
		*out = new(CurrentNSSecretSelector)
		**out = **in
	}
	if in.Swauth != nil {
		in, out := &in.Swauth, &out.Swauth
		*out = new(bool)
		**out = **in
	}
	if in.AllowReauth != nil {
		in, out := &in.AllowReauth, &out.AllowReauth
		*out = new(bool)
		**out = **in
	}
	if in.Cloud != nil {
		in, out := &in.Cloud, &out.Cloud
		*out = new(string)
		**out = **in
	}
	if in.MAXRetries != nil {
		in, out := &in.MAXRetries, &out.MAXRetries
		*out = new(int)
		**out = **in
	}
	if in.DisableNoCacheHeader != nil {
		in, out := &in.DisableNoCacheHeader, &out.DisableNoCacheHeader
		*out = new(bool)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(string)
		**out = **in
	}
	if in.ArchivePath != nil {
		in, out := &in.ArchivePath, &out.ArchivePath
		*out = new(string)
		**out = **in
	}
	if in.ArchiveContainer != nil {
		in, out := &in.ArchiveContainer, &out.ArchiveContainer
		*out = new(string)
		**out = **in
	}
	if in.ExpireAfter != nil {
		in, out := &in.ExpireAfter, &out.ExpireAfter
		*out = new(string)
		**out = **in
	}
	if in.Lock != nil {
		in, out := &in.Lock, &out.Lock
		*out = new(bool)
		**out = **in
	}
	if in.StateName != nil {
		in, out := &in.StateName, &out.StateName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftBackendConf.
func (in *SwiftBackendConf) DeepCopy() *SwiftBackendConf {
	if in == nil {
		return nil
	}
	out := new(SwiftBackendConf)
	in.DeepCopyInto(out)
	return out
}
